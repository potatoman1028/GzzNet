// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ECHO_PACKET_H_
#define FLATBUFFERS_GENERATED_ECHO_PACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {

struct Echo;
struct EchoBuilder;

struct Echo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EchoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4,
    VT_SEQ = 6,
    VT_DATA = 8
  };
  int64_t time() const {
    return GetField<int64_t>(VT_TIME, 0);
  }
  int32_t seq() const {
    return GetField<int32_t>(VT_SEQ, 0);
  }
  const flatbuffers::String *data() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_TIME) &&
           VerifyField<int32_t>(verifier, VT_SEQ) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           verifier.EndTable();
  }
};

struct EchoBuilder {
  typedef Echo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(int64_t time) {
    fbb_.AddElement<int64_t>(Echo::VT_TIME, time, 0);
  }
  void add_seq(int32_t seq) {
    fbb_.AddElement<int32_t>(Echo::VT_SEQ, seq, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::String> data) {
    fbb_.AddOffset(Echo::VT_DATA, data);
  }
  explicit EchoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EchoBuilder &operator=(const EchoBuilder &);
  flatbuffers::Offset<Echo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Echo>(end);
    return o;
  }
};

inline flatbuffers::Offset<Echo> CreateEcho(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t time = 0,
    int32_t seq = 0,
    flatbuffers::Offset<flatbuffers::String> data = 0) {
  EchoBuilder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_data(data);
  builder_.add_seq(seq);
  return builder_.Finish();
}

inline flatbuffers::Offset<Echo> CreateEchoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t time = 0,
    int32_t seq = 0,
    const char *data = nullptr) {
  auto data__ = data ? _fbb.CreateString(data) : 0;
  return Packet::CreateEcho(
      _fbb,
      time,
      seq,
      data__);
}

inline const Packet::Echo *GetEcho(const void *buf) {
  return flatbuffers::GetRoot<Packet::Echo>(buf);
}

inline const Packet::Echo *GetSizePrefixedEcho(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Echo>(buf);
}

inline bool VerifyEchoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Echo>(nullptr);
}

inline bool VerifySizePrefixedEchoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Echo>(nullptr);
}

inline void FinishEchoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Echo> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEchoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Echo> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_ECHO_PACKET_H_
