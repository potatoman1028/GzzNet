// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HOSBOXCOLISIONDATA_HOS_DATA_H_
#define FLATBUFFERS_GENERATED_HOSBOXCOLISIONDATA_HOS_DATA_H_

#include "flatbuffers/flatbuffers.h"

#include "hosData_generated.h"
#include "hosTransformData_generated.h"

namespace hos {
namespace Data {

struct BoxColision;
struct BoxColisionBuilder;

struct BoxColision FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BoxColisionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TRANSFORM = 4,
    VT_CENTER = 6,
    VT_SIZE = 8
  };
  const hos::Data::Transform *transform() const {
    return GetPointer<const hos::Data::Transform *>(VT_TRANSFORM);
  }
  const hos::Data::Vec3 *center() const {
    return GetStruct<const hos::Data::Vec3 *>(VT_CENTER);
  }
  const hos::Data::Vec3 *size() const {
    return GetStruct<const hos::Data::Vec3 *>(VT_SIZE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TRANSFORM) &&
           verifier.VerifyTable(transform()) &&
           VerifyField<hos::Data::Vec3>(verifier, VT_CENTER) &&
           VerifyField<hos::Data::Vec3>(verifier, VT_SIZE) &&
           verifier.EndTable();
  }
};

struct BoxColisionBuilder {
  typedef BoxColision Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_transform(flatbuffers::Offset<hos::Data::Transform> transform) {
    fbb_.AddOffset(BoxColision::VT_TRANSFORM, transform);
  }
  void add_center(const hos::Data::Vec3 *center) {
    fbb_.AddStruct(BoxColision::VT_CENTER, center);
  }
  void add_size(const hos::Data::Vec3 *size) {
    fbb_.AddStruct(BoxColision::VT_SIZE, size);
  }
  explicit BoxColisionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BoxColisionBuilder &operator=(const BoxColisionBuilder &);
  flatbuffers::Offset<BoxColision> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BoxColision>(end);
    return o;
  }
};

inline flatbuffers::Offset<BoxColision> CreateBoxColision(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<hos::Data::Transform> transform = 0,
    const hos::Data::Vec3 *center = 0,
    const hos::Data::Vec3 *size = 0) {
  BoxColisionBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_center(center);
  builder_.add_transform(transform);
  return builder_.Finish();
}

inline const hos::Data::BoxColision *GetBoxColision(const void *buf) {
  return flatbuffers::GetRoot<hos::Data::BoxColision>(buf);
}

inline const hos::Data::BoxColision *GetSizePrefixedBoxColision(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<hos::Data::BoxColision>(buf);
}

inline bool VerifyBoxColisionBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<hos::Data::BoxColision>(nullptr);
}

inline bool VerifySizePrefixedBoxColisionBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<hos::Data::BoxColision>(nullptr);
}

inline void FinishBoxColisionBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hos::Data::BoxColision> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBoxColisionBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hos::Data::BoxColision> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Data
}  // namespace hos

#endif  // FLATBUFFERS_GENERATED_HOSBOXCOLISIONDATA_HOS_DATA_H_
