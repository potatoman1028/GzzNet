// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HOSTRANSFORMDATA_HOS_DATA_H_
#define FLATBUFFERS_GENERATED_HOSTRANSFORMDATA_HOS_DATA_H_

#include "flatbuffers/flatbuffers.h"

#include "hosData_generated.h"

namespace hos {
namespace Data {

struct Transform;
struct TransformBuilder;

struct Transform FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TransformBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_ROTATION = 6,
    VT_SCALE = 8
  };
  const hos::Data::Vec3 *position() const {
    return GetStruct<const hos::Data::Vec3 *>(VT_POSITION);
  }
  const hos::Data::Vec3 *rotation() const {
    return GetStruct<const hos::Data::Vec3 *>(VT_ROTATION);
  }
  const hos::Data::Vec3 *scale() const {
    return GetStruct<const hos::Data::Vec3 *>(VT_SCALE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<hos::Data::Vec3>(verifier, VT_POSITION) &&
           VerifyField<hos::Data::Vec3>(verifier, VT_ROTATION) &&
           VerifyField<hos::Data::Vec3>(verifier, VT_SCALE) &&
           verifier.EndTable();
  }
};

struct TransformBuilder {
  typedef Transform Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(const hos::Data::Vec3 *position) {
    fbb_.AddStruct(Transform::VT_POSITION, position);
  }
  void add_rotation(const hos::Data::Vec3 *rotation) {
    fbb_.AddStruct(Transform::VT_ROTATION, rotation);
  }
  void add_scale(const hos::Data::Vec3 *scale) {
    fbb_.AddStruct(Transform::VT_SCALE, scale);
  }
  explicit TransformBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TransformBuilder &operator=(const TransformBuilder &);
  flatbuffers::Offset<Transform> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Transform>(end);
    return o;
  }
};

inline flatbuffers::Offset<Transform> CreateTransform(
    flatbuffers::FlatBufferBuilder &_fbb,
    const hos::Data::Vec3 *position = 0,
    const hos::Data::Vec3 *rotation = 0,
    const hos::Data::Vec3 *scale = 0) {
  TransformBuilder builder_(_fbb);
  builder_.add_scale(scale);
  builder_.add_rotation(rotation);
  builder_.add_position(position);
  return builder_.Finish();
}

inline const hos::Data::Transform *GetTransform(const void *buf) {
  return flatbuffers::GetRoot<hos::Data::Transform>(buf);
}

inline const hos::Data::Transform *GetSizePrefixedTransform(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<hos::Data::Transform>(buf);
}

inline bool VerifyTransformBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<hos::Data::Transform>(nullptr);
}

inline bool VerifySizePrefixedTransformBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<hos::Data::Transform>(nullptr);
}

inline void FinishTransformBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hos::Data::Transform> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTransformBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hos::Data::Transform> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Data
}  // namespace hos

#endif  // FLATBUFFERS_GENERATED_HOSTRANSFORMDATA_HOS_DATA_H_
