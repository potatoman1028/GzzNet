// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HOSBASEPACKET_HOS_PACKET_H_
#define FLATBUFFERS_GENERATED_HOSBASEPACKET_HOS_PACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace hos {
namespace Packet {

struct BaseProtocol;
struct BaseProtocolBuilder;

enum hos_object_type {
  hos_object_type_scene_manager = 0,
  hos_object_type_scene = 1,
  hos_object_type_remote_func = 2,
  hos_object_type_MIN = hos_object_type_scene_manager,
  hos_object_type_MAX = hos_object_type_remote_func
};

inline const hos_object_type (&EnumValueshos_object_type())[3] {
  static const hos_object_type values[] = {
    hos_object_type_scene_manager,
    hos_object_type_scene,
    hos_object_type_remote_func
  };
  return values;
}

inline const char * const *EnumNameshos_object_type() {
  static const char * const names[4] = {
    "scene_manager",
    "scene",
    "remote_func",
    nullptr
  };
  return names;
}

inline const char *EnumNamehos_object_type(hos_object_type e) {
  if (flatbuffers::IsOutRange(e, hos_object_type_scene_manager, hos_object_type_remote_func)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNameshos_object_type()[index];
}

enum hos_scene_protocol_type {
  hos_scene_protocol_type_HELLO = 0,
  hos_scene_protocol_type_GOODBYE = 1,
  hos_scene_protocol_type_IN = 2,
  hos_scene_protocol_type_IN_RESUT = 3,
  hos_scene_protocol_type_INFO = 4,
  hos_scene_protocol_type_CHAT = 5,
  hos_scene_protocol_type_MIN = hos_scene_protocol_type_HELLO,
  hos_scene_protocol_type_MAX = hos_scene_protocol_type_CHAT
};

inline const hos_scene_protocol_type (&EnumValueshos_scene_protocol_type())[6] {
  static const hos_scene_protocol_type values[] = {
    hos_scene_protocol_type_HELLO,
    hos_scene_protocol_type_GOODBYE,
    hos_scene_protocol_type_IN,
    hos_scene_protocol_type_IN_RESUT,
    hos_scene_protocol_type_INFO,
    hos_scene_protocol_type_CHAT
  };
  return values;
}

inline const char * const *EnumNameshos_scene_protocol_type() {
  static const char * const names[7] = {
    "HELLO",
    "GOODBYE",
    "IN",
    "IN_RESUT",
    "INFO",
    "CHAT",
    nullptr
  };
  return names;
}

inline const char *EnumNamehos_scene_protocol_type(hos_scene_protocol_type e) {
  if (flatbuffers::IsOutRange(e, hos_scene_protocol_type_HELLO, hos_scene_protocol_type_CHAT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNameshos_scene_protocol_type()[index];
}

enum hos_game_object_protocol_type {
  hos_game_object_protocol_type_HELLO = 0,
  hos_game_object_protocol_type_GOODBYE = 1,
  hos_game_object_protocol_type_INFO = 2,
  hos_game_object_protocol_type_LIST = 3,
  hos_game_object_protocol_type_MOVE = 4,
  hos_game_object_protocol_type_ATTACK = 5,
  hos_game_object_protocol_type_MIN = hos_game_object_protocol_type_HELLO,
  hos_game_object_protocol_type_MAX = hos_game_object_protocol_type_ATTACK
};

inline const hos_game_object_protocol_type (&EnumValueshos_game_object_protocol_type())[6] {
  static const hos_game_object_protocol_type values[] = {
    hos_game_object_protocol_type_HELLO,
    hos_game_object_protocol_type_GOODBYE,
    hos_game_object_protocol_type_INFO,
    hos_game_object_protocol_type_LIST,
    hos_game_object_protocol_type_MOVE,
    hos_game_object_protocol_type_ATTACK
  };
  return values;
}

inline const char * const *EnumNameshos_game_object_protocol_type() {
  static const char * const names[7] = {
    "HELLO",
    "GOODBYE",
    "INFO",
    "LIST",
    "MOVE",
    "ATTACK",
    nullptr
  };
  return names;
}

inline const char *EnumNamehos_game_object_protocol_type(hos_game_object_protocol_type e) {
  if (flatbuffers::IsOutRange(e, hos_game_object_protocol_type_HELLO, hos_game_object_protocol_type_ATTACK)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNameshos_game_object_protocol_type()[index];
}

struct BaseProtocol FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BaseProtocolBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_INDEX = 6,
    VT_FUNC_TABLE_INDEX = 8,
    VT_LEVEL = 10,
    VT_RESULT_CODE = 12
  };
  uint8_t type() const {
    return GetField<uint8_t>(VT_TYPE, 0);
  }
  uint16_t index() const {
    return GetField<uint16_t>(VT_INDEX, 0);
  }
  uint16_t func_table_index() const {
    return GetField<uint16_t>(VT_FUNC_TABLE_INDEX, 0);
  }
  bool level() const {
    return GetField<uint8_t>(VT_LEVEL, 0) != 0;
  }
  uint8_t result_code() const {
    return GetField<uint8_t>(VT_RESULT_CODE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<uint16_t>(verifier, VT_INDEX) &&
           VerifyField<uint16_t>(verifier, VT_FUNC_TABLE_INDEX) &&
           VerifyField<uint8_t>(verifier, VT_LEVEL) &&
           VerifyField<uint8_t>(verifier, VT_RESULT_CODE) &&
           verifier.EndTable();
  }
};

struct BaseProtocolBuilder {
  typedef BaseProtocol Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(uint8_t type) {
    fbb_.AddElement<uint8_t>(BaseProtocol::VT_TYPE, type, 0);
  }
  void add_index(uint16_t index) {
    fbb_.AddElement<uint16_t>(BaseProtocol::VT_INDEX, index, 0);
  }
  void add_func_table_index(uint16_t func_table_index) {
    fbb_.AddElement<uint16_t>(BaseProtocol::VT_FUNC_TABLE_INDEX, func_table_index, 0);
  }
  void add_level(bool level) {
    fbb_.AddElement<uint8_t>(BaseProtocol::VT_LEVEL, static_cast<uint8_t>(level), 0);
  }
  void add_result_code(uint8_t result_code) {
    fbb_.AddElement<uint8_t>(BaseProtocol::VT_RESULT_CODE, result_code, 0);
  }
  explicit BaseProtocolBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BaseProtocolBuilder &operator=(const BaseProtocolBuilder &);
  flatbuffers::Offset<BaseProtocol> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BaseProtocol>(end);
    return o;
  }
};

inline flatbuffers::Offset<BaseProtocol> CreateBaseProtocol(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t type = 0,
    uint16_t index = 0,
    uint16_t func_table_index = 0,
    bool level = false,
    uint8_t result_code = 0) {
  BaseProtocolBuilder builder_(_fbb);
  builder_.add_func_table_index(func_table_index);
  builder_.add_index(index);
  builder_.add_result_code(result_code);
  builder_.add_level(level);
  builder_.add_type(type);
  return builder_.Finish();
}

inline const hos::Packet::BaseProtocol *GetBaseProtocol(const void *buf) {
  return flatbuffers::GetRoot<hos::Packet::BaseProtocol>(buf);
}

inline const hos::Packet::BaseProtocol *GetSizePrefixedBaseProtocol(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<hos::Packet::BaseProtocol>(buf);
}

inline bool VerifyBaseProtocolBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<hos::Packet::BaseProtocol>(nullptr);
}

inline bool VerifySizePrefixedBaseProtocolBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<hos::Packet::BaseProtocol>(nullptr);
}

inline void FinishBaseProtocolBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hos::Packet::BaseProtocol> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBaseProtocolBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hos::Packet::BaseProtocol> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Packet
}  // namespace hos

#endif  // FLATBUFFERS_GENERATED_HOSBASEPACKET_HOS_PACKET_H_
