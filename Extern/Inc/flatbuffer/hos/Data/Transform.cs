// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace hos.Data
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Transform : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Transform GetRootAsTransform(ByteBuffer _bb) { return GetRootAsTransform(_bb, new Transform()); }
  public static Transform GetRootAsTransform(ByteBuffer _bb, Transform obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Transform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public hos.Data.Vec3? Position { get { int o = __p.__offset(4); return o != 0 ? (hos.Data.Vec3?)(new hos.Data.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public hos.Data.Vec3? Rotation { get { int o = __p.__offset(6); return o != 0 ? (hos.Data.Vec3?)(new hos.Data.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public hos.Data.Vec3? Scale { get { int o = __p.__offset(8); return o != 0 ? (hos.Data.Vec3?)(new hos.Data.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartTransform(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<hos.Data.Vec3> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<hos.Data.Vec3> rotationOffset) { builder.AddStruct(1, rotationOffset.Value, 0); }
  public static void AddScale(FlatBufferBuilder builder, Offset<hos.Data.Vec3> scaleOffset) { builder.AddStruct(2, scaleOffset.Value, 0); }
  public static Offset<hos.Data.Transform> EndTransform(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<hos.Data.Transform>(o);
  }
  public static void FinishTransformBuffer(FlatBufferBuilder builder, Offset<hos.Data.Transform> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTransformBuffer(FlatBufferBuilder builder, Offset<hos.Data.Transform> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
